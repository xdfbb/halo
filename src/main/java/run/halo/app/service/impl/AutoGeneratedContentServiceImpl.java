package run.halo.app.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import run.halo.app.model.dto.DouYinDTO;
import run.halo.app.model.dto.WechatAccDTO;
import run.halo.app.model.dto.WeixinAppletDTO;
import run.halo.app.model.dto.ZhiHuDTO;
import run.halo.app.model.entity.DouYin;
import run.halo.app.model.entity.WechatAcc;
import run.halo.app.model.entity.WeixinApplet;
import run.halo.app.model.entity.ZhiHu;
import run.halo.app.repository.DouYinRepository;
import run.halo.app.repository.WechatAccRepository;
import run.halo.app.repository.WechatAppletRepository;
import run.halo.app.repository.ZhihuRepository;
import run.halo.app.service.AutoGeneratedContentService;

@Slf4j
@Service
public class AutoGeneratedContentServiceImpl implements AutoGeneratedContentService {

    private final WechatAccRepository wechatAccRepository;
    private final WechatAppletRepository wechatAppletRepository;
    private final DouYinRepository douYinRepository;
    private final ZhihuRepository zhihuRepository;


    public AutoGeneratedContentServiceImpl(
        WechatAccRepository wechatAccRepository,
        WechatAppletRepository wechatAppletRepository,
        DouYinRepository douYinRepository,
        ZhihuRepository zhihuRepository) {
        this.wechatAppletRepository = wechatAppletRepository;
        this.douYinRepository = douYinRepository;
        this.zhihuRepository = zhihuRepository;
        this.wechatAccRepository = wechatAccRepository;

    }

    @Override
    public Page<WechatAccDTO> findAllWechatAccByRank(
        Pageable pageable) {
        Assert.notNull(pageable, "Page info must not be null");
        Page<WechatAcc> wechatAccPage =
            wechatAccRepository.findAll(isNonDisabledWechatAcc(), pageable);
        // Convert and return
        return wechatAccPage.map(wechatAcc -> new WechatAccDTO().convertFrom(wechatAcc));
    }

    @Override
    public Page<WeixinAppletDTO> findAllWeixinAppletByRank(
        Pageable pageable) {
        Page<WeixinApplet> wechatAppletPage =
            wechatAppletRepository.findAll(isNonDisabledWeixinApplet(), pageable);
        // Convert and return
        return wechatAppletPage.map(
            wechatApplet -> new WeixinAppletDTO().convertFrom(wechatApplet));
    }

    @Override
    public Page<ZhiHuDTO> findAllZhiHuByLike(
        Pageable pageable) {
        Page<ZhiHu> zhiHuAccPage = zhihuRepository.findAll(isNonDisabledZhiHu(), pageable);
        // Convert and return
        return zhiHuAccPage.map(zhiHuAcc -> new ZhiHuDTO().convertFrom(zhiHuAcc));
    }

    @Override
    public Page<DouYinDTO> findAllDouYinByLike_count(
        Pageable pageable) {
        Page<DouYin> douyinAccPage = douYinRepository.findAll(isNonDisabledDouYin(), pageable);
        // Convert and return
        return douyinAccPage.map(douYinAcc -> new DouYinDTO().convertFrom(douYinAcc));
    }

    public static Specification<DouYin> isNonDisabledDouYin() {
        return (root, query, builder) -> {
            return builder.not(root.get("disabled"));
        };
    }

    public static Specification<ZhiHu> isNonDisabledZhiHu() {
        return (root, query, builder) -> {
            return builder.not(root.get("disabled"));
        };
    }

    public static Specification<WeixinApplet> isNonDisabledWeixinApplet() {
        return (root, query, builder) -> {
            return builder.not(root.get("disabled"));
        };
    }

    public static Specification<WechatAcc> isNonDisabledWechatAcc() {
        return (root, query, builder) -> {
            return builder.not(root.get("disabled"));
        };
    }
}
